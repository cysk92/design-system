name: PR Build and Deploy

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  get-node-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.read-nvmrc.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Read .nvmrc
        id: read-nvmrc
        run: echo "version=$(cat .nvmrc)" >> $GITHUB_OUTPUT

  validation:
    needs: get-node-version
    uses: ./.github/workflows/validation.yml
    with:
      node-version: ${{ needs.get-node-version.outputs.version }}

  build-and-publish-snapshot:
    name: 'ðŸš€ Build and publish snapshot'
    needs: [validation, get-node-version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.get-node-version.outputs.version }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Yarn
        run: |
          corepack enable
          corepack prepare yarn@stable --activate

      - name: Cache yarn files
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            .yarn/install-state.gz
            node_modules
          key: node-modules-${{ needs.get-node-version.outputs.version }}-${{ hashFiles('**/yarn.lock', '**/package.json') }}

      - name: Install Packages
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --immutable

      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Calculate semantic version
        id: semantic-version
        run: |
          # Run semantic-release in dry-run mode to get the next version
          echo "Calculating semantic version for PR..."
          
          # Create a temporary .releaserc for PR testing
          cat > .releaserc.pr.json << EOF
          {
            "branches": ["main"],
            "repositoryUrl": "https://github.com/securityscorecard/design-system.git",
            "debug": "true",
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/npm",
              "@semantic-release/github",
              "semantic-release-export-data"
            ],
            "preset": "angular"
          }
          EOF
          
          # Run semantic-release dry-run and capture output
          RELEASE_OUTPUT=$(yarn semantic-release --dry-run --config .releaserc.pr.json 2>&1 || true)
          echo "Release output: $RELEASE_OUTPUT"
          
          # Extract version from output (look for "The next release version is" pattern)
          if echo "$RELEASE_OUTPUT" | grep -q "The next release version is"; then
            SEMANTIC_VERSION=$(echo "$RELEASE_OUTPUT" | grep "The next release version is" | sed 's/.*The next release version is \([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/')
            echo "semantic-version=$SEMANTIC_VERSION" >> $GITHUB_OUTPUT
            echo "Calculated semantic version: $SEMANTIC_VERSION"
          else
            # Fallback to current version if semantic-release doesn't determine a new version
            echo "semantic-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "No new semantic version determined, using current: $CURRENT_VERSION"
          fi
          
          # Clean up
          rm -f .releaserc.pr.json

      - name: Generate snapshot version
        id: snapshot-version
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          # Use semantic version if available, otherwise fall back to current version
          BASE_VERSION="${{ steps.semantic-version.outputs.semantic-version }}"
          if [ -z "$BASE_VERSION" ]; then
            BASE_VERSION="${{ steps.current-version.outputs.current-version }}"
          fi
          SNAPSHOT_VERSION="${BASE_VERSION}-snapshot-${SHORT_SHA}"
          echo "snapshot-version=$SNAPSHOT_VERSION" >> $GITHUB_OUTPUT
          echo "Generated snapshot version: $SNAPSHOT_VERSION"
          echo "Base version used: $BASE_VERSION"

      - name: Update package.json version
        run: |
          npm version ${{ steps.snapshot-version.outputs.snapshot-version }} --no-git-tag-version

      - name: Cache build
        id: library-build-cache
        uses: actions/cache@v4
        with:
          path: build
          key: build-pr-${{ github.event.number }}-${{ github.sha }}-${{ hashFiles('**/yarn.lock', '**/package.json', 'src/**') }}

      - name: Build Step
        if: steps.library-build-cache.outputs.cache-hit != 'true'
        run: yarn build

      - name: Publish to npm
        run: npm publish --tag pr-${{ github.event.number }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.snapshot-version.outputs.snapshot-version }}';
            const semanticVersion = '${{ steps.semantic-version.outputs.semantic-version }}';
            const currentVersion = '${{ steps.current-version.outputs.current-version }}';
            const prNumber = ${{ github.event.number }};
            
            let versionInfo = '';
            if (semanticVersion && semanticVersion !== currentVersion) {
              versionInfo = `**Semantic Version:** \`${semanticVersion}\` (would be released if merged)\n**Base Version:** \`${currentVersion}\`\n`;
            } else {
              versionInfo = `**Base Version:** \`${currentVersion}\`\n`;
            }
            
            const comment = `## ðŸš€ Snapshot Build Published
            
            A snapshot version has been published for testing:
            
            **Snapshot Version:** \`${version}\`
            ${versionInfo}**NPM Tag:** \`pr-${prNumber}\`
            
            You can install this version in your project using:
            \`\`\`bash
            yarn add @securityscorecard/design-system@pr-${prNumber}
            \`\`\`
            
            This version will be automatically unpublished when the PR is closed or merged.`;
            
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  cleanup-on-pr-close:
    name: 'ðŸ§¹ Cleanup on PR close'
    if: github.event.action == 'closed'
    needs: get-node-version
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.get-node-version.outputs.version }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Yarn
        run: |
          corepack enable
          corepack prepare yarn@stable --activate

      - name: Unpublish snapshot version
        run: |
          npm unpublish @securityscorecard/design-system@pr-${{ github.event.number }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        continue-on-error: true

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ github.event.number }};
            
            const comment = `## ðŸ§¹ Snapshot Cleanup
            
            The snapshot version for PR #${prNumber} has been unpublished from npm.
            
            If you need to test with this version again, please reopen the PR or create a new one.`;
            
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            }); 